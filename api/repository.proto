syntax = "proto3";

package api;

import "google/api/annotations.proto";

/**
 * Health checks inspired by the conventions here:
 * https://github.com/grpc/grpc/blob/master/doc/health-checking.md
 * (although they do not follow that protocol exactly)
 *
 * Exposed using the Healthz method on the Repository service.
 */
message HealthCheckRequest {
    string service = 1;
}

message HealthCheckResponse {
    enum ServingStatus {
        UNKNOWN = 0;
        SERVING = 1;
        NOT_SERVING = 2;
    }
    ServingStatus status = 1;
}

message Model {
    string modelId = 1;
    string description = 2;
    string canonicalHyperParameters=3;
}

message ListModelsRequest {
    string marker = 1;
    int32 maxItems = 2;
}

message ListModelsResponse {
    repeated string modelIds = 1;
}

message CreateModelRequest {
    Model model = 1;
}

message CreateModelResponse {
    string resourcePath = 1;
}

message GetModelRequest {
    string modelId = 1;
}

message GetModelResponse {
    Model model = 1;
}

message UpdateModelRequest {
    string modelId = 1;
    Model model = 2;
}

message UpdateModelResponse {
    Model model = 1;
}

message ListHyperParametersRequest {
    string modelId = 1;
    string marker = 2;
    int32 maxItems = 3;
}

message ListHyperParametersResponse {
    repeated string hyperParametersIds = 1;
}

message CreateHyperParametersRequest {
    string modelId = 1;
    string hyperParametersId = 2;
    string canonicalCheckpoint = 3;
    map<string, string> hyperParameters = 4;
}

message CreateHyperParametersResponse {
    string resourcePath = 1;
}

message GetHyperParametersRequest {
    string modelId = 1;
    string hyperParametersId = 2;
}

message GetHyperParametersResponse {
    string modelId = 1;
    string hyperParametersId = 2;
    string upgradeTo = 3;
    string canonicalCheckpoint = 4;
    map<string, string> hyperParameters = 5;
}

message UpdateHyperParametersRequest {
    string modelId = 1;
    string hyperParametersId = 2;
    string upgradeTo = 3;
    string canonicalCheckpoint = 4;
    map<string, string> hyperParameters = 5;
}

message UpdateHyperParametersResponse {
    string modelId = 1;
    string hyperParametersId = 2;
    string upgradeTo = 3;
    string canonicalCheckpoint = 4;
    map<string, string> hyperParameters = 5;
}

message ListCheckpointsRequest {
    string modelId = 1;
    string hyperParametersId = 2;
    string marker = 3;
    int32 maxItems = 4;
}

message ListCheckpointsResponse {
    repeated string checkpointIds = 1;
}

message CreateCheckpointRequest {
    string modelId = 1;
    string hyperParametersId = 2;
    string checkpointId = 3;
    string link = 4;
    map<string, string> info = 5;
}

message CreateCheckpointResponse {
    string resourcePath = 1;
}

message GetCheckpointRequest {
    string modelId = 1;
    string hyperParametersId = 2;
    string checkpointId = 3;
}

message GetCheckpointResponse {
    string resourcePath = 1;
    string link = 2;
    map<string, string> info = 3;
}

service Repository {
    rpc Healthz(HealthCheckRequest) returns (HealthCheckResponse) {
        option (google.api.http) = {
            get: "/v1/repository/healthz"
        };
    };
    rpc ListModels (ListModelsRequest) returns (ListModelsResponse) {
        option (google.api.http) = {
            get: "/v1/repository/models"
        };
    };
    rpc CreateModel (CreateModelRequest) returns (CreateModelResponse) {
        option (google.api.http) = {
            post: "/v1/repository/models"
            body: "*"
        };
    };
    rpc GetModel (GetModelRequest) returns (GetModelResponse) {
        option (google.api.http) = {
            get: "/v1/repository/models/{modelId}"
        };
    }
    rpc UpdateModel (UpdateModelRequest) returns (UpdateModelResponse) {
        option (google.api.http) = {
            put: "/v1/repository/models/{modelId}"
            body: "*"
        };
    }
    rpc ListHyperParameters(ListHyperParametersRequest) returns (ListHyperParametersResponse) {
        option (google.api.http) = {
            get: "/v1/repository/models/{modelId}/hyperparameters"
        };
    }
    rpc CreateHyperParameters(CreateHyperParametersRequest) returns (CreateHyperParametersResponse) {
        option (google.api.http) = {
            post: "/v1/repository/models/{modelId}/hyperparameters"
            body: "*"
        };
    }
    rpc GetHyperParameters(GetHyperParametersRequest) returns (GetHyperParametersResponse) {
        option (google.api.http) = {
            get: "/v1/repository/models/{modelId}/hyperparameters/{hyperParametersId}"
        };
    }
    rpc UpdateHyperParameters(UpdateHyperParametersRequest) returns (UpdateHyperParametersResponse) {
        option (google.api.http) = {
            put: "/v1/repository/models/{modelId}/hyperparameters/{hyperParametersId}"
            body: "*"
        };
    }
    rpc ListCheckpoints(ListCheckpointsRequest) returns (ListCheckpointsResponse) {
        option (google.api.http) = {
            get: "/v1/repository/models/{modelId}/hyperparameters/{hyperParametersId}/checkpoints"
        };
    }
    rpc CreateCheckpoint(CreateCheckpointRequest) returns (CreateCheckpointResponse) {
        option (google.api.http) = {
            post: "/v1/repository/models/{modelId}/hyperparameters/{hyperParametersId}/checkpoints"
            body: "*"
        };
    }
    rpc GetCheckpoint(GetCheckpointRequest) returns (GetCheckpointResponse) {
        option (google.api.http) = {
            get: "/v1/repository/models/{modelId}/hyperparameters/{hyperParametersId}/checkpoints/{checkpointId}"
        };
    }
}
